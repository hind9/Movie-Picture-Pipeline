# Workflow name
name: Frontend Continuous Deployment

# trigger push 
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  Linting:
    runs-on: ubuntu-latest
    environment: Development Environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json

      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run Lint
        working-directory: starter/frontend
        run: npm run lint   

  Testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json
        
      - name: Install Dependencies
        working-directory: starter/frontend
        run: npm ci

      - name: Run Test
        working-directory: starter/frontend
        run: npm run test

  build-and-deploy:
    needs: [Linting, Testing]
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json
  
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}
  
      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names frontend || \
          aws ecr create-repository --repository-name frontend

# backend URI
      - name: Configure Kubeconfig
        run: aws eks update-kubeconfig --name cluster --region us-east-1
      
      - name: Build and Push Docker Image
        working-directory: starter/frontend
        env:
          IMAGE_TAG: latest
          REPO_NAME: frontend
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=http://aef1eb5d00cd740d38902a7046ace4a6-61707594.us-east-1.elb.amazonaws.com --tag 239828331157.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG .
          docker push 239828331157.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
     
      - name: Check Backend URL
        run: echo "Backend URL: $REACT_APP_MOVIE_API_URL"


      - name: Deploy Docker Image to Amazon EKS
        working-directory: starter/frontend/k8s
        env:
          IMAGE_TAG: latest
          REPO_NAME: frontend
        run: |
          kustomize edit set image frontend=239828331157.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:$IMAGE_TAG
          kustomize build | kubectl apply -f -